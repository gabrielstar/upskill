import groovy.transform.Field

def NODE_LABEL = "MM-CPU"
// UID and GID are user and group on which Jenkins runs. This is needed because we cannot change how Jenkins runs
// docker. We need to adjust docker image instead.
@Field def UID = 2117
@Field def GID = 2117

@Field def JENKINS_URL = "http://mr-0xg1:8080/job/mlops"
@Field def PLAYWRIGHT_IMAGE = "gcr.io/vorvan/h2oai/playwright:1.14.1"
@Field def H2O_CLI_IMAGE = "gcr.io/vorvan/h2oai/h2o-cli:latest"
@Field def SLACK_CHANNEL_MLOPS = '#mlops-qa'
@Field def MODULES_DIR = "ci/lib"


properties([
        buildDiscarder(logRotator(daysToKeepStr: '30')),
        buildDiscarder(logRotator(numToKeepStr: "10")),
        parameters([
                stringParam(
                        name: "APP_INSTANCE_URL",
                        defaultValue: '',
                        description: 'URL of your App instance e.g.  https://cloud-qa.h2o.ai/instance/xxxxxxxx-yyy/ or https://wave-ui.XY-test.mlops-dev.h2o.ai/'
                ),
                stringParam(
                        name: "GATEWAY_URL",
                        defaultValue: 'https://mlops-api.cloud-qa.h2o.ai',
                        description: 'API URL e.g. https://mlops-api.cloud-qa.h2o.ai or https://api.XY-test.mlops-dev.h2o.ai'
                ),
                stringParam(
                        name: "CLIENT_ID",
                        description: 'Keycloak client id'
                ),
                stringParam(
                        name: "PLATFORM_TOKEN_ENDPOINT",
                        defaulyValue: "",
                        description: 'Platform token endpoint e.g. https://keycloak.XY-test.mlops-dev.h2o.ai/auth/realms/mlops/protocol/openid-connect/token'
                ),
                password(
                        name: "PLATFORM_TOKEN",
                        description: 'Platform token'
                ),
                stringParam(
                        name: 'TEST_USER_NAME',
                        defaultValue: 'tester',
                        description: 'Name of a test user',
                ),
                password(
                        name: "TEST_USER_PASSWORD",
                        description: 'Password of a test user'
                ),
                stringParam(
                        name: 'JENKINS_CREDENTIALS',
                        defaultValue: "JENKINS_MLOPS_TOKEN",
                        description: 'User credentials to use to trigger performance job remotely (required if using @performance tag)'
                ),
                stringParam(
                        name: 'E2E_TEST_SELECTOR',
                        defaultValue: "smoke",
                        description: 'A subset of tests as per pytest markers e.g. '
                ),
                booleanParam(
                    name: 'NOTIFY_SLACK',
                    defaultValue: false,
                    description: 'Whether to notify slack channel of the build result.'
                ),
                stringParam(
                    name: 'SLACK_CHANNEL',
                    defaultValue: SLACK_CHANNEL_MLOPS,
                    description: 'Channel or thread id used for notification'
                ),
                stringParam(
                    name: 'PYTEST_EXCLUDE_MARKERS',
                    defaultValue: "",
                    description: 'Which pytest markers to exclude from run'
                ),
        ])
])

ansiColor("xterm") {
    timestamps {
        node(NODE_LABEL) {
            def APP_INSTANCE_URL = params.getOrDefault('APP_INSTANCE_URL', '')
            def GATEWAY_URL = params.getOrDefault('GATEWAY_URL', '')
            def PLATFORM_TOKEN = params.getOrDefault('PLATFORM_TOKEN', '')
            def CLIENT_ID = params.getOrDefault('CLIENT_ID', '')
            def PLATFORM_TOKEN_ENDPOINT = params.getOrDefault('PLATFORM_TOKEN_ENDPOINT', '')
            def TEST_USER_NAME = params.getOrDefault('TEST_USER_NAME', 'tester')
            def TEST_USER_PASSWORD = params.getOrDefault('TEST_USER_PASSWORD', '')
            def E2E_TEST_SELECTOR = params.getOrDefault('E2E_TEST_SELECTOR', 'project')

            def playwrightImage = ""
            def h2oImage = ""

            stage("0. Init") {
                deleteDir()
                checkout scm
                utils = load "${MODULES_DIR}/utils.groovy"

                if (!APP_INSTANCE_URL) {
                    error("APP_INSTANCE_URL must be provided")
                }
                if (!CLIENT_ID) {
                    error("CLIENT_ID must be provided")
                }
                if (!PLATFORM_TOKEN) {
                    error("PLATFORM_TOKEN must be provided")
                }
            }
            stage("1. Pull images") {
                parallel([
                        "1.1 H2O CLI"   : {
                            h2oImage = docker.image(H2O_CLI_IMAGE)
                            h2oImage.pull()
                        },
                        "1.2 Playwright": {
                            playwrightImage = docker.image(PLAYWRIGHT_IMAGE)
                            playwrightImage.pull()
                        }
                ])
            }
            h2oImage.inside() {
                stage("2. Install testing deps") {
                    sh "make setup-test"
                }
            }
            stage("3. E2E tests") {
                withCredentials([
                        usernamePassword(
                                credentialsId: params.JENKINS_CREDENTIALS,
                                passwordVariable: 'JENKINS_PASSWORD',
                                usernameVariable: 'JENKINS_USERNAME'
                        )
                ]) {
                    try {

                        pytestIncludeMarkers = constructPytestIncludeMarkers(params.E2E_TEST_SELECTOR)
                        pytestExcludeMarkers = constructPytestExcludeMarkers(params.PYTEST_EXCLUDE_MARKERS)
                        def pytestMarkersString = ""
                        if (pytestIncludeMarkers.isEmpty() && !pytestExcludeMarkers.isEmpty()) {
                            pytestMarkersString = """ \"dummy or not ${pytestExcludeMarkers}\""""
                        }
                        if (!pytestIncludeMarkers.isEmpty() && pytestExcludeMarkers.isEmpty()) {
                            pytestMarkersString = """ \"${pytestIncludeMarkers}\""""
                        }
                        if (!pytestIncludeMarkers.isEmpty() && !pytestExcludeMarkers.isEmpty()) {
                            pytestMarkersString = """ \"${pytestIncludeMarkers} and not ${pytestExcludeMarkers}\""""
                        }

                        playwrightImage.inside() {
                            sh """
                                    make clean-ci test-e2e-ci-bdd \
                                        TEST_SELECTOR='${pytestMarkersString}' \
                                        APP_INSTANCE_URL=${APP_INSTANCE_URL} \
                                        GATEWAY_URL=${GATEWAY_URL} \
                                        PLATFORM_TOKEN='${PLATFORM_TOKEN}' \
                                        PLATFORM_TOKEN_ENDPOINT=${PLATFORM_TOKEN_ENDPOINT} \
                                        CLIENT_ID=${CLIENT_ID} \
                                        HAC_USERNAME=${TEST_USER_NAME} \
                                        HAC_PASSWORD=${TEST_USER_PASSWORD} \
                                        JENKINS_URL=${JENKINS_URL} \
                                        JENKINS_USERNAME=${JENKINS_USERNAME} \
                                        JENKINS_PASSWORD=${JENKINS_PASSWORD} \
                                """
                        }
                    } finally {
                        utils.captureError "Retrieve pytest artifacts", {
                            zip zipFile: 'tests-media.zip', archive: true, dir: 'test-results'
                            zip zipFile: 'allure.zip', archive: true, dir: 'reports/allure'
                            archiveArtifacts artifacts: 'reports/pytest-e2e-bdd.log', fingerprint: true, allowEmptyArchive: true
                            allure includeProperties: false, jdk: '', results: [[path: 'reports/allure']]
                            junit "reports/junit-e2e-bdd.xml"
                        }

                        if (params.NOTIFY_SLACK) {
                            channel = params.SLACK_CHANNEL
                            if(channel){
                                slackNotify(currentBuild.currentResult, channel)
                            }
                        }
                    }
                }
            }
        }
    }
}

def slackNotify(String buildResult, String channel) {
    def colors = ["SUCCESS": "good", "UNSTABLE": "warning"]
    slackSend(
            channel: channel,
            color: colors.get(buildResult, "danger"),
            message: "*FE TESTS*: from branch `${env.BRANCH_NAME}` completed with `${buildResult}` <${env.BUILD_URL}|build details>",
    )
}

static def String constructPytestIncludeMarkers(String includeString) {
    String[] includeList = includeString.split(",")
    return includeList.join(" or ")
}

static def String constructPytestExcludeMarkers(String excludeString) {
    String[] excludeList = excludeString.split(",")
    return excludeList.join(" and not ")
}