import groovy.transform.Field

def NODE_LABEL = "MM-CPU"
// UID and GID are user and group on which Jenkins runs. This is needed because we cannot change how Jenkins runs
// docker. We need to adjust docker image instead.
@Field def UID = 2117
@Field def GID = 2117

@Field def JENKINS_URL = "http://mr-0xg1:8080/job/mlops"
@Field def SLACK_CHANNEL_MLOPS = '#mlops-qa'
@Field def MODULES_DIR = "ci/lib"
@Field def JOB = "mlops/wave-app/e2e_fe_tests"
@Field def PARALLEL_MARKERS = ['thread1','thread2']


properties([
        buildDiscarder(logRotator(daysToKeepStr: '30')),
        buildDiscarder(logRotator(numToKeepStr: "10")),
        parameters([
                stringParam(
                        name: "APP_INSTANCE_URL",
                        defaultValue: 'https://mlops.cloud-qa.h2o.ai/',
                        description: 'URL of your App instance e.g.  https://cloud-qa.h2o.ai/instance/xxxxxxxx-yyy/ or https://wave-ui.XY-test.mlops-dev.h2o.ai/'
                ),
                stringParam(
                        name: "GATEWAY_URL",
                        defaultValue: 'https://mlops-api.cloud-qa.h2o.ai',
                        description: 'API URL e.g. https://mlops-api.cloud-qa.h2o.ai or https://api.XY-test.mlops-dev.h2o.ai'
                ),
                stringParam(
                        name: "CLIENT_ID",
                        defaultValue: 'q8s-qa-platform',
                        description: 'Keycloak client id'
                ),
                stringParam(
                        name: "PLATFORM_TOKEN_ENDPOINT",
                        defaultValue: "https://auth.demo.h2o.ai/auth/realms/q8s-qa/protocol/openid-connect/token",
                        description: 'Platform token endpoint e.g. https://keycloak.XY-test.mlops-dev.h2o.ai/auth/realms/mlops/protocol/openid-connect/token'
                ),
                stringParam(
                        name: 'USER_CREDENTIALS',
                        defaultValue: 'h2omlops-tester-qa',
                        description: 'Name of a test user credentials',
                ),
                stringParam(
                        name: 'USER_REFRESH_TOKEN',
                        defaultValue: 'h2omlops-tester-cloud-qa-refresh-token',
                        description: 'Name of a test user token credentials',
                ),
                stringParam(
                        name: 'E2E_TEST_SELECTOR',
                        defaultValue: "",
                        description: 'Subset fo tests to run.'
                ),
                stringParam(
                        name: 'JENKINS_CREDENTIALS',
                        defaultValue: "JENKINS_MLOPS_TOKEN",
                        description: 'User credentials to use to trigger performance job remotely (required if using @performance tag)'
                ),
                booleanParam(
                    name: 'NOTIFY_SLACK',
                    defaultValue: false,
                    description: 'Whether to notify slack channel of the build result.'
                ),
                stringParam(
                    name: 'SLACK_CHANNEL',
                    defaultValue: SLACK_CHANNEL_MLOPS,
                    description: 'Channel or thread id used for notification'
                ),
                stringParam(
                    name: 'MLOPS_VERSION',
                    defaultValue: "",
                    description: 'MLOPS version or branch name. Will use current branch if not set'
                ),
        ])
])

ansiColor("xterm") {
    timestamps {
        node(NODE_LABEL) {
            stage("Init") {
                deleteDir()
                checkout scm
                utils = load "${MODULES_DIR}/utils.groovy"
            }
            stage("E2E tests") {
                target = utils.getTarget(JOB, params.MLOPS_VERSION)
                withCredentials([
                        usernamePassword(
                                credentialsId: params.JENKINS_CREDENTIALS,
                                passwordVariable: 'JENKINS_PASSWORD',
                                usernameVariable: 'JENKINS_USERNAME'
                        ),
                        usernamePassword(
                                credentialsId: params.USER_CREDENTIALS,
                                passwordVariable: 'TEST_USER_PASSWORD',
                                usernameVariable: 'TEST_USER_NAME'
                        ),
                        string(credentialsId: params.USER_REFRESH_TOKEN, variable: 'PLATFORM_TOKEN')
                ]) {
                    def user_params = [
                            stringParam(name: 'APP_INSTANCE_URL', value: params.APP_INSTANCE_URL),
                            stringParam(name: 'GATEWAY_URL', value: params.GATEWAY_URL),
                            stringParam(name: 'PLATFORM_TOKEN', value: PLATFORM_TOKEN),
                            stringParam(name: 'PLATFORM_TOKEN_ENDPOINT', value: params.PLATFORM_TOKEN_ENDPOINT),
                            stringParam(name: 'CLIENT_ID', value: params.CLIENT_ID),
                            stringParam(name: 'TEST_USER_NAME', value: TEST_USER_NAME),
                            stringParam(name: 'TEST_USER_PASSWORD', value: TEST_USER_PASSWORD),
                            stringParam(name: 'JENKINS_URL', value: params.JENKINS_URL),
                            stringParam(name: 'JENKINS_USERNAME', value: params.JENKINS_USERNAME),
                            stringParam(name: 'JENKINS_PASSWORD', value: params.JENKINS_PASSWORD),
                            booleanParam(name: 'NOTIFY_SLACK', value: params.NOTIFY_SLACK),
                            stringParam(name: 'SLACK_CHANNEL', value: params.SLACK_CHANNEL),
                    ]
                    parallel(utils.buildParallelJobs("FE Tests", target, user_params, PARALLEL_MARKERS, params.E2E_TEST_SELECTOR,""))
                }
            }
             stage("Join allure reports") {
                utils.joinReports()
            }
        }
    }
}
